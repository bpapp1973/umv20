import { Component, OnInit, Input, ViewChild, AfterViewInit } from '@angular/core';
import { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { $MODEL_NAME_CAMEL$Service } from '../../../services/$MODEL_NAME$/$MODEL_NAME$.service';
import { $MODEL_NAME_CAMEL$ } from '../../../models/$MODEL_NAME$';
import { $MODEL_NAME_CAMEL$DetailsComponent } from '../$MODEL_NAME$-details/$MODEL_NAME$-details.component';
import { ActivatedRoute } from '@angular/router';
import { Router } from '@angular/router';
import { ConfirmationDialogComponent } from '../../common/confirmation-dialog/confirmation-dialog.component';

@Component({
  selector: 'app-$MODEL_NAME$-list',
  templateUrl: './$MODEL_NAME$-list.component.html',
  styleUrls: ['./$MODEL_NAME$-list.component.css'],
  providers: [$MODEL_NAME_CAMEL$Service]
})
export class $MODEL_NAME_CAMEL$ListComponent implements AfterViewInit {

  @Input() $MODEL_NAME$s: $MODEL_NAME_CAMEL$[];

  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  dialogRef: MatDialogRef<ConfirmationDialogComponent>;

  displayedColumns = [$MODEL_FIELDS$, 'options'];
  dataSource = new MatTableDataSource();

  constructor(private $MODEL_NAME$Service: $MODEL_NAME_CAMEL$Service, private router: Router, private dialog: MatDialog) {
  }

  ngAfterViewInit() {
    this.$MODEL_NAME$Service
      .getAll$MODEL_NAME_CAMEL$s()
      .subscribe(
        ($MODEL_NAME$s) => {
          this.dataSource.data = $MODEL_NAME$s;
        }
      );
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  applyFilter(filterValue: string) {
    filterValue = filterValue.trim();
    filterValue = filterValue.toLowerCase();
    this.dataSource.filter = filterValue;
  }

  show$MODEL_NAME_CAMEL$(id: number) {
    this.router.navigate(['$MODEL_NAME$/details', id]);
  }

  edit$MODEL_NAME_CAMEL$(id: number) {
    this.router.navigate(['$MODEL_NAME$/edit', id]);
  }

  remove$MODEL_NAME_CAMEL$($MODEL_NAME$: $MODEL_NAME_CAMEL$) {
    this.dialogRef = this.dialog.open(ConfirmationDialogComponent, {
      disableClose: false
    });
    this.dialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete?';

    this.dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.$MODEL_NAME$Service.delete$MODEL_NAME_CAMEL$ById($MODEL_NAME$.id)
          .subscribe(
            (_) => {
              console.log('subscribe');
              this.$MODEL_NAME$s = this.$MODEL_NAME$s.filter((c) => c.id !== $MODEL_NAME$.id);
            }
          );
      }
      this.dialogRef = null;
    });
  }
}
